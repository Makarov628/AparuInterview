{"version":3,"sources":["pages/drivers.js","pages/autos.js","App.js","reportWebVitals.js","index.js"],"names":["Drivers","useState","autos","setAutos","drivers","setDrivers","currentDriver","setCurrentDriver","modal","setModal","changeMode","setChangeMode","defaultDriver","id","name","autoId","auto","getDrivers","fetch","then","resp","json","data","catch","console","log","openDialog","index","mode","open","closeDialog","close","useEffect","modalElement","document","querySelector","M","Modal","init","dismissible","onCloseEnd","el","modalInstance","getInstance","selectElement","FormSelect","className","onClick","class","map","driver","data-badge-caption","brand","model","method","text","placeholder","type","value","onChange","target","for","parseInt","selected","headers","body","JSON","stringify","err","createDriver","updateDriver","Autos","currentAuto","setCurrentAuto","defaultAuto","getAutos","length","createAuto","updateAuto","App","page","setPage","Tabs","role","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d21370f6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport M from 'materialize-css';\n\nconst Drivers = () => {\n\n  const [autos, setAutos] = useState([]);\n\n  const [drivers, setDrivers] = useState([]);\n  const [currentDriver, setCurrentDriver] = useState({});\n  const [modal, setModal] = useState(null);\n  const [changeMode, setChangeMode] = useState(null);\n\n  const defaultDriver = {\n    ...currentDriver,\n    id: null,\n    name: null,\n    autoId: null,\n    auto: null\n  }\n\n  const getDrivers = () => {\n    setDrivers([])\n\n    fetch(\"/Drivers/with-auto\")\n      .then(resp => resp.json())\n      .then(data => setDrivers(data))\n      .catch(console.log)\n  }\n\n  const getAutos = () => {\n    return fetch(\"/Autos\")\n      .then(resp => resp.json())\n      .then(data => setAutos(data))\n      .catch(console.log)\n  }\n\n  const createDriver = (data) => {\n    fetch(\"/Drivers\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': \"application/json\"\n      },\n      body: JSON.stringify(data)\n    })\n      .then(resp => resp.text())\n      .then(data => {\n        getDrivers()\n        closeDialog()\n      })\n      .catch(err => console.log)\n  }\n\n  const updateDriver = (id, data) => {\n    fetch(`/Drivers/${id}`, {\n      method: \"PUT\",\n      headers: {\n        'Content-Type': \"application/json\"\n      },\n      body: JSON.stringify(data)\n    })\n      .then(resp => resp.text())\n      .then(data => {\n        getDrivers()\n        closeDialog()\n      })\n      .catch(err => console.log)\n  }\n\n  const deleteDriver = (id) => {\n    fetch(`/Drivers/${id}`, { method: \"DELETE\" })\n      .then(resp => resp.text())\n      .then((data) => getDrivers())\n      .catch(console.log)\n  }\n\n  const saveDriver = () => {\n    const data = {\n      name: currentDriver.name,\n      autoId: currentDriver.autoId\n    }\n\n    if (changeMode == 'create') {\n      createDriver(data)\n    } else if (changeMode == 'update') {\n      updateDriver(currentDriver.id, data)\n    }\n  }\n\n  const openDialog = (index, mode) => {\n\n    setChangeMode(mode)\n    if (index !== null) {\n      setCurrentDriver(drivers[index])\n    }\n\n    getAutos().then(() =>\n      modal.open()\n    );\n  }\n\n  const closeDialog = () => {\n    setAutos([])\n    modal.close()\n  }\n\n  useEffect(() => {\n    const modalElement = document.querySelector(\"div.modal.changeDriver\")\n    M.Modal.init(modalElement, {\n      dismissible: false,\n      onCloseEnd: (el) => {\n        setCurrentDriver(defaultDriver)\n        setChangeMode(null);\n      }\n    })\n\n    const modalInstance = M.Modal.getInstance(modalElement)\n    setModal(modalInstance)\n\n    const selectElement = document.querySelector(\"select.auto-select\")\n    M.FormSelect.init(selectElement);\n\n    getDrivers()\n  }, [])\n\n  return (\n    <div className=\"row\">\n      <h3>\n        <span>Водители</span>\n        <span>&nbsp;&nbsp;</span>\n        <a\n          onClick={() => openDialog(null, 'create')}\n          class=\"btn btn-floating orange\"\n        >\n          <i class=\"material-icons\">add</i>\n        </a>\n      </h3>\n      <table>\n        <thead>\n          <tr>\n            <th>Имя</th>\n            <th>Машина</th>\n            <th>Действие</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            drivers.map((driver, index) =>\n              <tr key={`tr${driver.id}`}>\n                <td key={`td1_${driver.id}`}>{driver.name}</td>\n                <td key={`td2_${driver.id}`}>\n                  {driver.auto ?\n                    <span class=\"new badge orange\" data-badge-caption=\"\">\n                      {driver.auto.brand} {driver.auto.model}\n                    </span>\n                    : null\n                  }\n                </td>\n                <td key={`td3_${driver.id}`}>\n                  <a\n                    key={`edit_${driver.id}`}\n                    onClick={() => openDialog(index, 'update')}\n                    class=\"btn btn-floating orange\"\n                  >\n                    <i class=\"material-icons\">edit</i>\n                  </a>\n\n                  <span>&nbsp;&nbsp;</span>\n\n                  <a onClick={() => deleteDriver(driver.id)} class=\"btn btn-floating red\"><i class=\"material-icons\">delete</i></a>\n                </td>\n              </tr>\n            )\n          }\n        </tbody>\n      </table>\n\n      <div class=\"modal changeDriver \">\n        <div class=\"modal-content\">\n          <h4>\n            {changeMode == \"create\" ? \"Создать\" : \"Изменить\"} машину\n          </h4>\n          <br />\n          <div className=\"row\">\n            <div class=\"input-field col s12 \">\n              <input\n                placeholder=\"Введите имя водителя\"\n                id=\"driver_name\"\n                type=\"text\"\n                value={currentDriver.name || \"\"}\n                class=\"validate\"\n                onChange={(el) => {\n                  setCurrentDriver({ ...currentDriver, name: el.target.value })\n                }}\n              />\n              <label for=\"driver_name\">Имя</label>\n            </div>\n\n            <div class=\"input-field col s12\">\n              <label for=\"auto-select\">Машина</label>\n              <br/>\n              <br/>\n              <select\n                class=\"auto-select browser-default\"\n                id=\"auto-select\"\n                onChange={(el) =>\n                  setCurrentDriver({ ...currentDriver, autoId: parseInt(el.target.value) })\n                }\n              >\n                <option value=\"\">Без машины</option>\n                {\n                  autos.map(auto =>\n                    <option selected={auto.id === currentDriver.autoId} value={auto.id}>{auto.brand} {auto.model}</option>\n                  )\n                }\n              </select>\n\n            </div>\n\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <a onClick={closeDialog} class=\"btn btn-flat\">Закрыть</a>\n          <a onClick={saveDriver} class={`btn orange ${!currentDriver.name ? \"disabled\" : \"\"}`}>{changeMode == \"create\" ? \"Создать\" : \"Изменить\"}</a>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Drivers","import React, { useEffect, useState } from 'react'\nimport M from 'materialize-css';\n\n\nconst Autos = () => {\n\n    const [autos, setAutos] = useState([]);\n    const [currentAuto, setCurrentAuto] = useState({});\n    const [modal, setModal] = useState(null);\n    const [changeMode, setChangeMode] = useState(null);\n\n    const defaultAuto = {\n        brand: null,\n        model: null\n    }\n\n    const getAutos = () => {\n        setAutos([])\n\n        fetch(\"/Autos/with-drivers\")\n            .then(resp => resp.json())\n            .then(data => setAutos(data))\n            .catch(console.log)\n    }\n\n    const createAuto = (data) => {\n        fetch(\"/Autos\", {\n            method: \"POST\",\n            headers: {\n                'Content-Type': \"application/json\"\n            },\n            body: JSON.stringify(data)\n        })\n            .then(resp => resp.text())\n            .then(data => {\n                getAutos()\n                closeDialog()\n            })\n            .catch(err => console.log)\n    }\n\n    const updateAuto = (id, data) => {\n        fetch(`/Autos/${id}`, {\n            method: \"PUT\",\n            headers: {\n              'Content-Type': \"application/json\"\n            },\n            body: JSON.stringify(data)\n          })\n            .then(resp => resp.text())\n            .then(data => {\n                getAutos()\n                closeDialog()\n            })\n            .catch(err => console.log)\n    }\n\n    const deleteAuto = (id) => {\n        fetch(`/Autos/${id}`, {\n            method: \"DELETE\"\n          })\n            .then(resp => resp.text())\n            .then(data => {\n                getAutos()\n            })\n            .catch(err => console.log)\n    }\n\n    const saveAuto = () => {\n        const data = {\n            brand: currentAuto.brand,\n            model: currentAuto.model\n        }\n\n        if (changeMode == 'create') {\n            createAuto(data)\n        } else if (changeMode == 'update') {\n            updateAuto(currentAuto.id, data)\n        }\n    }\n\n    const openDialog = (index, mode) => {\n\n        setChangeMode(mode)\n        if (index !== null) {\n            setCurrentAuto(autos[index])\n        }\n\n        modal.open()\n    }\n\n\n    const closeDialog = () => {\n        modal.close()\n    }\n\n\n    useEffect(() => {\n        const modalElement = document.querySelector(\"div.modal.changeAuto\")\n        M.Modal.init(modalElement, {\n            dismissible: false,\n            onCloseEnd: (el) => {\n                setCurrentAuto(defaultAuto)\n                setChangeMode(null);\n            }\n        })\n\n        const modalInstance = M.Modal.getInstance(modalElement)\n        setModal(modalInstance)\n\n        getAutos()\n    }, [])\n\n    return (\n        <>\n            <h3>\n                <span>Автомобили</span>\n                <span>&nbsp;&nbsp;</span>\n                <a\n                    onClick={() => openDialog(null, 'create')}\n                    class=\"btn btn-floating orange\"\n                >\n                    <i class=\"material-icons\">add</i>\n                </a>\n            </h3>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Бренд</th>\n                        <th>Модель</th>\n                        <th>Водители</th>\n                        <th>Действие</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        autos.map((auto, index) =>\n                            <tr>\n                                <td>{auto.brand}</td>\n                                <td>{auto.model}</td>\n                                <td>\n                                    {auto.drivers.length > 0 ?\n                                        auto.drivers.map(driver =>\n                                            <>\n                                                <span class=\"new badge orange\" data-badge-caption=\"\">{driver.name}</span>\n                                                <span>&nbsp;</span>\n                                            </>\n                                        )\n                                        : null\n                                    }\n                                </td>\n                                <td>\n                                    <a\n                                        key={`edit_${auto.id}`}\n                                        onClick={() => openDialog(index, 'update')}\n                                        class=\"btn btn-floating orange\"\n                                    >\n                                        <i class=\"material-icons\">edit</i>\n                                    </a>\n\n                                    <span>&nbsp;&nbsp;</span>\n\n                                    <a onClick={() => deleteAuto(auto.id)} class=\"btn btn-floating red\"><i class=\"material-icons\">delete</i></a>\n                                </td>\n                            </tr>\n                        )\n                    }\n                </tbody>\n            </table>\n\n            <div class=\"modal changeAuto \">\n                <div class=\"modal-content\">\n                    <h4>\n                        {changeMode == \"create\" ? \"Создать\" : \"Изменить\"} машину\n                    </h4>\n                    <br />\n                    <div className=\"row\">\n                        <div class=\"input-field col s12 \">\n                            <input\n                                placeholder=\"Введите бренд машины\"\n                                id=\"driver_name\"\n                                type=\"text\"\n                                value={currentAuto.brand || \"\"}\n                                class=\"validate\"\n                                onChange={(el) => {\n                                    setCurrentAuto({ ...currentAuto, brand: el.target.value })\n                                }}\n                            />\n                            <label for=\"driver_name\">Бренд</label>\n                        </div>\n\n                        <div class=\"input-field col s12 \">\n                            <input\n                                placeholder=\"Введите модель машины\"\n                                id=\"driver_name\"\n                                type=\"text\"\n                                value={currentAuto.model || \"\"}\n                                class=\"validate\"\n                                onChange={(el) => {\n                                    setCurrentAuto({ ...currentAuto, model: el.target.value })\n                                }}\n                            />\n                            <label for=\"driver_name\">Модель</label>\n                        </div>\n\n\n                    </div>\n                </div>\n                <div class=\"modal-footer\">\n                    <a onClick={closeDialog} class=\"btn btn-flat\">Закрыть</a>\n                    <a onClick={saveAuto} class={`btn orange ${!currentAuto.brand && !currentAuto.model ? \"disabled\" : \"\"}`}>{changeMode == \"create\" ? \"Создать\" : \"Изменить\"}</a>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Autos","import { useEffect, useState } from 'react';\nimport M from 'materialize-css';\n\nimport Drivers from './pages/drivers'\nimport Autos from './pages/autos'\n\nimport './App.css';\n\nfunction App() {\n\n  const [page, setPage] = useState(\"drivers\")\n\n\n  useEffect(() => {\n    M.Tabs.init(document.querySelector(\"ul.tabs\"))\n  }, [])\n\n  return (\n    <>\n      <nav class=\"orange nav-extended\" role=\"navigation\">\n        <div class=\"nav-wrapper container\">\n          <a id=\"logo-container\" href=\"#\" class=\"brand-logo\">Aparu</a>\n\n        </div>\n        <div class=\"row\">\n          <div className=\"nav-content\">\n            <div class=\"col s12\">\n              <ul class=\"tabs tabs-transparent\">\n                <li class=\"tab col s6\"><a onClick={() => setPage(\"drivers\")}>Водители</a></li>\n                <li class=\"tab col s6\"><a onClick={() => setPage(\"autos\")}>Автомобили</a></li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"container\">\n        <div className=\"section\">\n          <div className=\"row\"></div>\n          \n            {\n              page == \"drivers\"\n                ? <Drivers />\n                : page == \"autos\"\n                  ? <Autos />\n                  : null\n            }\n          \n\n        </div>\n      </div>\n\n\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}